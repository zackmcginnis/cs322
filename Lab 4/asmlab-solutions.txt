------------------------------------------------------------------------
x86-64 Assembly Language Programming (asmlab)           Sample Solutions
Mark P Jones, Portland State University
------------------------------------------------------------------------

This file presents sample solutions for each of the six examples that
were covered in the Assembly Programming lab (asmlab).  I've used lots
of comments (on lines beginning with the # character) in the hope that
you'll be better able to understand my code.  I've also tried very hard
to stick to using only the instructions that I showed you in class.
Of course, there are many other ways to solve these problems.  I hope
you will learn some useful assembly language programming skills by
studying these examples.

There are LOTS of different ways to write these programs, and in fact
there are almost certainly LOTS of ways to write shorter or faster
versions too.  So if you were to try writing your own versions, you
would probably end up with something that looks at least a little
bit different.

----------------------
### Example 1: return the length of the input array in %eax

        movl    $0, %eax        # initialize length count in eax
        jmp     test
loop:   incl    %eax            # increment count
        addq    $4, %rdi        # and move to next array element

test:   movl    (%rdi), %ecx    # load array element
        cmpl    $0, %ecx        # test for end of array
        jne     loop            # repeat if we're not done ...

----------------------
### Example 2: return the largest number from the array in %eax
### We've been told that it's ok to assume that the array is nonempty ...

        movl    (%rdi), %eax    # get the first element in the array
loop:   addq    $4, %rdi        # move to the next element
        movl    (%rdi), %ecx    # load next array element
        cmpl    $0, %ecx        # end of the array?
        je      done
        cmpl    %ecx, %eax      # compare ecx with largest so far (%eax)
        jnl     loop            # continue if %eax still largest
        movl    %ecx, %eax      # we've found a new largest value
        jmp     loop
done:

----------------------
### Example 3: return the position of the largest number from the array
### in %eax.  Similar to the code for Example 2, except that we use
### %edx to hold the biggest number found so far, which frees up the %eax
### register to hold the position of that biggest number in the array.
### We also need a register (we'll use %esi) to count the number of the
### current element.

        movl    $0, %esi        # first element is index 0
        movl    %esi, %eax      # position of first element in the array
        movl    (%rdi), %edx    # value of first element in the array

loop:   addq    $4, %rdi        # move to next array element
        incl    %esi            # update count
        movl    (%rdi), %ecx    # and load in value

        cmpl    $0, %ecx        # are we done?
        je      done

        cmpl    %ecx, %edx      # compare this element with current max
        jnl     loop            # continue if current max still largest

        movl    %esi, %eax      # save index of new largest value
        movl    %ecx, %edx      # save new largest value
        jmp     loop
done:

----------------------
### Example 4: return the average value of the numbers in the array.
### We're going to divide by the length of the array so it is nice to
### have the assumption stated that the array is not empty....

        movl    $1, %ecx        # ecx will count the number of elements
        movl    (%rdi), %eax    # eax will record the running total

loop:   addq    $4, %rdi        # move to next element in the array
        movl    (%rdi), %edx    # read array element
        cmpl    $0, %edx        # are we done?
        je      done
        addl    %edx, %eax      # add to running total
        incl    %ecx            # increment count
        jmp     loop

        # When we reach this point in the program, %eax will
        # contain the total of all the array elements and ecx
        # contain the number of array elements.
done:   cltd			# sign extend %eax into %edx
	idivl   %ecx            # quotient goes in %eax, as required ...

----------------------
### Example 5: Reverse the order of the elements in the array,
### without using any additional storage.  This requires a
### little more algorithmic sophistication ...

### First we'll search to the end of the array to find the address
### of the last array element in %rdx:

        movq    %rdi, %rdx      # initialize %rdx at start of array
loop1:  addq    $4, %rdx        # move to next array element
        movl    (%rdx), %eax    # read in array element
        cmpl    $0, %eax        # are we done?
        jne     loop1
        # At this point, %rdx holds the address of the zero element
        subq    $4, %rdx        # adjust %rdx to point to the last element

### Our next step is to swap pairs of elements, exchanging the value
### in memory at %rdi with the value in memory at %rdx.  After each
### exchange, we add $4 to %rdi and subtract $4 from %rdx.  This
### process stops when %rdi >= %rdx, at which point we can be sure
### that the array has been reversed:

loop2:  cmpq    %rdx, %rdi      # compare pointers at two ends of array
        jnl     done
        movl    (%rdi), %ecx    # read values from each end of the array
        movl    (%rdx), %eax
        movl    %eax, (%rdi)    # write them back in reverse order
        movl    %ecx, (%rdx)
        addq    $4, %rdi        # adjust pointers at each end of array
        subq    $4, %rdx
        jmp     loop2           # and repeat ...

done:   # the problem description doesn't specify what value should be
        # returned in %eax so we won't worry about it here ...

----------------------
### Example 6: Sort the elements in the array into increasing order.
### We'll use a form of selection sort here.

sort:   movl    (%rdi), %eax    # get value at start of array
        cmpl    $0, %eax        # are we done?
        je      done

        movq    %rdi, %rdx      # prepare to scan forward over array
scan:   addq    $4, %rdx
        movl    (%rdx), %ecx
        cmpl    $0, %ecx        # reached end of array?
        je      save
        cmpl    %eax, %ecx      # is this smaller than previous minimum?
        jnl     scan
        movl    %eax, (%rdx)    # save previous smallest back in array
        movl    %ecx, %eax      # and move new smallest into eax
        jmp     scan

save:   movl    %eax, (%rdi)    # save smallest number at front of array
        addq    $4, %rdi        # now sort the rest of the array
        jmp     sort

done:   # the problem description doesn't specify what value should be
        # returned in %eax so we won't worry about it here ...

----------------------
To use one of the code fragments above:

- Make a copy of the appropriate template (linux.s or mac.s) in
  a file called exampleN.s, where N is the example number.

- Edit the line at the top of the file to replace the name
  "linux.s" or "mac.s" with the true filename, "exampleN.s".

- Copy the assembly language text from this file into exampleN.s
  between the lines that mark the section where your code should be
  inserted.  (This will replace the dummy code that just loads a
  value 42 into the eax register.)

Now you can compile and run the resulting program using the
following lines (again, replacing N with the appropriate example
number):

  gcc -o exampleN main.c exampleN.s
  ./exampleN

Alternatively, you can use the provide Makefile, which compiles and
runs all of the example programs when you enter the make command.
Please review the notes.txt file in asmlab.zip for further details.

------------------------------------------------------------------------
