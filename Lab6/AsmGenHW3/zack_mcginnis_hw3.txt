Zack McGinnis
CS322
Spring 2015
Homework 3


1.

    public boolean compile(Assembly a, Frame f) {
        // Remember to allow for the possibility that
        // init, test, and step could each be null ...
        //init and step = statement
        //test = boolean
        //body = statement

        //create new labels lab1 and lab2
        //for body and test, respectively
        String lab1 = a.newLabel();
        String lab2 = a.newLabel();

        //see if init is included
        //and compile if true
        if (init != null)
          init.compileExpr(a, f);

        //jump to test
        a.emit("jmp", lab2);

        //lab1 contains the body of for loop
        a.emitLabel(lab1);
        body.compile(a, f);

        //see if step is included
        //and compile if true.
        //will compile after body in 
        //each loop iteration
        if (step != null)
          step.compileExpr(a, f);

        //contains the test portion of the for loop
        //if null, will compile body in an infinite loop
        //if not null, will compile body if true, and
        //repeat until test = false

        a.emitLabel(lab2);
        if (test != null)
           test.branchTrue(a, f, lab1);
        else
        a.emit("jmp", lab1);
        return true; 
    }


To ensure correctness of this implementation, I first chose to
implement the suggested specifications within the hw3.txt.
Namely, ensuring proper functionality when our for statements look
like:
   for (i=1; i<10; i=i+1) print i;
   for (i=1; i<10; ) { print i; i=i+1; }
   for (;;) { print 1; }
For the first two specified definitions, I was able to get the correct
output of a printed, line by line sequence of the numbers 1-9.
For the last definition, I (correctly?) produced the output of the 
number 1, printed to (near) infinite.

In the last two cases, I had to make sure that my implentation would
function correctly with or more of init,test, or step missing.

I was able to utilize if statements for each of these cases, accounting
for all possible combinations of missing init, tests, or steps. 
The piece of code:
test.branchTrue(a, f, lab1);
basically loops to lab1 and compiles the body + step if the test is true.
If the test is false, we break out of the loop and return from the function.


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------


2.
Though I was unable to reproduce the desired explicit.s output, I was able to 
produce a similar .s file. 
My result after compiling the implicit.prog source program:
        .file   "out.s"

        .data
Xx:
        .long   0
Xy:
        .long   0

        .text
        .globl  XinitGlobals
XinitGlobals:
        pushq   %rbp
        movq    %rsp, %rbp
        movq    %rbp, %rsp
        popq    %rbp
        ret

        .globl  Xmain
Xmain:
        pushq   %rbp
        movq    %rsp, %rbp
        movl    Xy, %edi
        call    Xprint
        movq    %rbp, %rsp
        popq    %rbp
        ret

Within Function.java I was able to partially implement the name, epilogue,
and prologue of initGlobals:

    void compileFunction(Assembly a, LocEnv globals) {
        a.emit(".globl", a.name("initGlobals"));
        a.emitLabel(a.name("initGlobals"));
        a.emitPrologue();
        Frame f = new FunctionFrame(formals, globals);
        for (int i=0; i<formals.length; i++) {
            compileFunction(a, globals);
        }   
        a.emit();

        a.emit(".globl", a.name(name));
        a.emitLabel(a.name(name));
        a.emitPrologue();
        if (body.compile(a, f)) {
            a.emitEpilogue();
        }
        a.emit();
    }

Admittedly, I knew I was probably going about this solution the wrong way since
the above definition makes little sense. Aside from the fact that I was having troubles iterating
over the declared global variables, I was also having errors whenever I tested a .prog file
which contained more than one declared function. 

After seeking guidance, I went to look in other .java files for some clues about how I could
better tackle this problem; namely, varIntro.java and initVarIntro.java.
Within each of the aforementioned .java files, I added the method:

        public void compileGlobals(Assembly a, Frame f) {
}

My plan was to define this method, similar to how functions are compiled in the functions
class, and use it on each global variable as I iterate through the list in Function.java.
However, time contraints haven't allowed me the ability to work on this solution any further.
I am very curious to see a working/implemented solution to this problem!



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------



3.1a
solution.prog

void main() {
    
 int a = 1;
 int b = 2;
 int c = 2;

 while (a<10){
 int d = 0;
   while (d<a){
   b = f(b, d);
   print h(g(d));
   d = 1+d;
   }
 print b;
 b = b*c;
 a = a+1;
 }
 print a;
}

int f(int s, int t){
 int diff = s-t;
 diff = diff * g(diff);
 return diff;
}
    
int g(int u){
  return 2*u - u;
}
   
int h(int v){
  if(v < 2){
  return 1;
  }
  int tem = h(v - 1);
  return tem + h(v - 2);       
}


3.1b
------------------------------------------
I have also uploaded a jpeg to the other dropbox which includes
my diagrams/planning for my solution.prog file.
-----------------------------------------------------

3.2
The original source may differ from my solution in a few different ways.
First, the original source program may contain different variable names in the 
function definitions for f(), g(), and h(). Although meaningless, it is likely that 
the original source program has differing names for the vars within those definitions.

Additionally, the original source program may have also been able to utilize special 
functions which replace commonly occuring instructions, such as x+1.

I would also like to add that my implementation isn't exactly like the sample.s file.
In the function h definition, I was unable to reproduce the exact register values 
in regards to the variables tem and v. 


While looking at sample.s, we can find 3 separate examples of poor code quality:
3.3a.
Within function Xg, we see the lines:
    movl    $2,   %eax
    movl    %edi, %esi
    imull   %esi, %eax
    movl    %edi, %esi
    subl    %esi, %eax

Which takes in a variable, multiplies it by 2, then subtracts itself from the product,
and finally returns the value of the result.
Essentially, 2*u - u = u.
Because we know that we could just return the variable u instead of 2*u - u, we can optimize
this function by returning u.  This is more efficient since returning the variable saves 4 lines
of instructions per function call.

3.3b
Within function Xf, we see the lines:
    imull   %ecx, %eax
    movl    %eax, -8(%rbp)
    movl    -8(%rbp), %eax

Which translates to:

diff = diff * g(diff);
return diff;

It appears to me that we could just as easily write:
return diff * g(diff);
Which would save us two lines of code by simply returning %eax
directly after the imull instruction, rather than storing it in diff
and returning diff. 

3.3c
Additionally, when looking at the last two errors in combination, we notice another possible
optimization. Since we know that function g essentially returns the original value of the variable
passed in to it (e.g. g(u) = u), we can simply get rid of function g altogether.

We see function g is called in function f at:
...
    movl    -8(%rbp), %edi
    call    Xg
    movq    %rax, %rcx
    ...

And also in block l2 at:
...
    movl    -32(%rbp), %edi
    call    Xg
    movq    %rax, %rdi
    call    Xh
    movq    %rax, %rdi
...

If we bypass function g and just passed the variable through to the next instructions following the call
to g, we will be able to save at least two lines of instruction per call to g.




