/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
  public static void main(String args[]) throws ParseException {
    new Parser(System.in);  // Read from standard input
    Stmt s = prog();

    System.out.println("Complete program is:");
    s.print(4);

    System.out.println("Running on an empty memory:");
    Memory mem = new Memory();
    s.exec(mem);

    System.out.println("Compiling:");
    Program p     = new Program();
    Block   entry = p.block(s.compile(p, new Stop()));
    System.out.println("Entry point is at " + entry);
    p.show();

    System.out.println("Running on an empty memory:");
    mem      = new Memory();
    Block pc = entry;
    while (pc!=null)  {
      pc = pc.code().run(mem);
    }

    System.out.println("Done!");
  }

//-- Define the grammatical rules for programs: ------------------------------
  static final public Stmt prog() throws ParseException {
                Stmt prog;
    prog = stmts();
    jj_consume_token(0);
    {if (true) return prog;}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for statements: ----------------------------
  static final public Stmt block() throws ParseException {
                 Stmt s1;
    jj_consume_token(1);
    s1 = stmts();
    jj_consume_token(2);
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt stmt() throws ParseException {
                Token t; BExpr b; IExpr i; Stmt s1, s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      s1 = block();
    {if (true) return s1;}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(3);
      i = iexpr();
      jj_consume_token(4);
    {if (true) return new Assign(t.image, i);}
      break;
    case 5:
      jj_consume_token(5);
      jj_consume_token(6);
      b = bexpr();
      jj_consume_token(7);
      s1 = stmt();
      jj_consume_token(8);
      s2 = stmt();
     {if (true) return new If(b, s1, s2);}
      break;
    case 9:
      jj_consume_token(9);
      jj_consume_token(6);
      b = bexpr();
      jj_consume_token(7);
      s1 = stmt();
     {if (true) return new While(b, s1);}
      break;
    case 10:
      jj_consume_token(10);
      i = iexpr();
      jj_consume_token(4);
     {if (true) return new Print(i);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stmt stmts() throws ParseException {
                 Stmt s1, s2;
    // one or more statements:
      s1 = stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 5:
    case 9:
    case 10:
    case IDENT:
      s2 = stmts();
                           s1=new Seq(s1,s2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

//-- Define the grammatical rules for expressions: ---------------------------
  static final public BExpr bexpr() throws ParseException {
                  IExpr m, n; BExpr b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 16:
    case INTLIT:
    case IDENT:
      n = iexpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
        m = iexpr();
                                 {if (true) return new LT(n,m);}
        break;
      case 12:
        jj_consume_token(12);
        m = iexpr();
                                 {if (true) return new EqEq(n,m);}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 13:
      jj_consume_token(13);
      b = bexpr();
      jj_consume_token(14);
     {if (true) return b;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IExpr iexpr() throws ParseException {
                  IExpr m, n;
    n = atom();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
      case 16:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        m = atom();
                             n = new Plus(n,m);
        break;
      case 16:
        jj_consume_token(16);
        m = atom();
                             n = new Minus(n,m);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public IExpr atom() throws ParseException {
                 IExpr i; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      i = iexpr();
      jj_consume_token(7);
                      {if (true) return i;}
      break;
    case 16:
      jj_consume_token(16);
      i = atom();
                      {if (true) return new UMin(i);}
      break;
    case INTLIT:
      t = jj_consume_token(INTLIT);
                      {if (true) return new Int(Integer.parseInt(t.image));}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                      {if (true) return new Var(t.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000622,0x8000622,0x1800,0x8812040,0x18000,0x18000,0x8810040,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
